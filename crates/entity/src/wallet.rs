//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use super::sea_orm_active_enums::AssetScope;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "wallet")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub parent_id: Option<i32>,
    pub scope: AssetScope,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::balance::Entity")]
    Balance,
    #[sea_orm(has_many = "super::balance_priority::Entity")]
    BalancePriority,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    SelfRef,
    #[sea_orm(has_many = "super::wallet_metadata::Entity")]
    WalletMetadata,
}

impl Related<super::balance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Balance.def()
    }
}

impl Related<super::balance_priority::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BalancePriority.def()
    }
}

impl Related<super::wallet_metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WalletMetadata.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
